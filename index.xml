<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>RandomBits</title>
        <link>http://shoaibb.github.io/bits/</link>
        <description>Welcome to My Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>shoaib.bakhtyar@gmail.com (Shoaib Bakhtyar)</managingEditor>
            <webMaster>shoaib.bakhtyar@gmail.com (Shoaib Bakhtyar)</webMaster><lastBuildDate>Mon, 22 May 2023 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://shoaibb.github.io/bits/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>just a note</title>
    <link>http://shoaibb.github.io/bits/posts/2023-05-22/</link>
    <pubDate>Mon, 22 May 2023 00:00:00 &#43;0000</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/2023-05-22/</guid>
    <description><![CDATA[🛠️ Title]]></description>
</item>
<item>
    <title>The configparser module</title>
    <link>http://shoaibb.github.io/bits/posts/configparser/</link>
    <pubDate>Thu, 27 Oct 2022 12:16:13 &#43;0200</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/configparser/</guid>
    <description><![CDATA[The configparser module in python is used to handle different credentials in one file. Often we would like not to store our login details in a script. One way is to store login details in a config file and then use it from the file through the configparser module in python.
Let’s see how to create a configuration file programmatically. Our goal is to create the credentials of different connections.]]></description>
</item>
<item>
    <title>The GREP Command</title>
    <link>http://shoaibb.github.io/bits/posts/grep/</link>
    <pubDate>Mon, 08 Aug 2022 12:16:13 &#43;0200</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/grep/</guid>
    <description><![CDATA[The grep utilities are a family that includes grep, egrep, and fgrep for searching files. For most use cases, fgrep is sufficient due to speed and only looking into strings and words. However, typing grep is easy. Grep is an essential Linux and Unix command. It is used to search text and strings in a given file. In other words, grep command searches the given file for lines containing a match to the given strings or words.]]></description>
</item>
<item>
    <title>Random Linux Terminal Tips</title>
    <link>http://shoaibb.github.io/bits/posts/multipletips/</link>
    <pubDate>Mon, 01 Aug 2022 07:16:13 &#43;0200</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/multipletips/</guid>
    <description><![CDATA[Some random but useful tips &hellip;
1. Echo $PATH on separate lines Usually the path variable $PATH is echoed in a long line that is hard to read. The command below will pipe the output of echo command to another command tr that trims the long line based on a special character : and output the result into multiple single lines.
1 echo $PATH | tr &#39;:&#39; &#39;\n&#39; 2. Functions in bash profile We can define our own custom functions in bash profile (.]]></description>
</item>
<item>
    <title>Port forwarding using SSH</title>
    <link>http://shoaibb.github.io/bits/posts/ssh-port-fowarding/</link>
    <pubDate>Thu, 07 Jul 2022 12:16:13 &#43;0200</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/ssh-port-fowarding/</guid>
    <description><![CDATA[This tip is about using a remote server as a development environment by running a jupyter notebook on the remote server (where the only port that is opened is port 22 for SSH) and using the local machine to connect (and use) jupyter notebook.
Here, we assume that jupyter is running inside the remote server using port XXXX.
Step 1: Running Jupyter First step is to run jupyter in the remote server using the port XXXX, i.]]></description>
</item>
<item>
    <title>MAC App Installation Error</title>
    <link>http://shoaibb.github.io/bits/posts/appinstallerr/</link>
    <pubDate>Wed, 06 Jul 2022 12:16:13 &#43;0200</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/appinstallerr/</guid>
    <description><![CDATA[
Most often you install an app from source other than Apple, you may get an error while opening the installed App. The error message somehow look like below:
Error App Damaged and cannot be opened In order to fix this type of error and to be able to open the app (for example, application.app), type and run the following command on your MAC terminal:
1 sudo xattr -cr /path/to/application.app ]]></description>
</item>
<item>
    <title>File Searching Through Terminal</title>
    <link>http://shoaibb.github.io/bits/posts/filesearch/</link>
    <pubDate>Wed, 06 Jul 2022 11:05:49 &#43;0200</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/filesearch/</guid>
    <description><![CDATA[Searching for a file is fairly easy in a bash terminal. We can search a file if we know part of the file name or full name or even the file extension.
For example, use the following command to find files using partial match in the file name, e.g. John
1 find . -type f -name &#34;*John*&#34; Similarly, we can use the fullname for the file if we know it:]]></description>
</item>
<item>
    <title>Creating Small Files in Bulk</title>
    <link>http://shoaibb.github.io/bits/posts/bulkfiles/</link>
    <pubDate>Wed, 06 Jul 2022 11:05:36 &#43;0200</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/bulkfiles/</guid>
    <description><![CDATA[Sometimes, we need to create smaller files in bulk for different purpose (such as, to test file transfer speed over a network). We can use the following bash one line script to do the job of creating 500 files each having 1MB size.
The command will create files in a dir smaller_files
1 for i in {001..500}; do head -c 1M &lt;/dev/urandom &gt;smaller_files/randfile$i; done ]]></description>
</item>
<item>
    <title>SCP File Transfering</title>
    <link>http://shoaibb.github.io/bits/posts/scp/</link>
    <pubDate>Wed, 06 Jul 2022 10:25:11 &#43;0200</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/scp/</guid>
    <description><![CDATA[SCP is a nice tool that can be used for file transferring between two computers (referred to as machines in this post).
We can use the following scp command to transfer file(s) from your local machine to a remote machine. Remember to cd first to the files location and then run this command (shobak-local is your local username and shoabk-remote is the remote username).
1 2 3 # cd to location of files that are to be transferred cd /home/shobak-local/Desktop ~/shobak-local/Desktop$ 1 scp files_to_move.]]></description>
</item>
<item>
    <title>Shortcut/Symlink</title>
    <link>http://shoaibb.github.io/bits/posts/symlink/</link>
    <pubDate>Thu, 23 Jun 2022 12:04:20 &#43;0200</pubDate>
    <author>Shoaib Bakhtyar</author>
    <guid>http://shoaibb.github.io/bits/posts/symlink/</guid>
    <description><![CDATA[Suppose we have the following directory that we would like to create a shortcutto. We can use the bash command ln to create a shortcut or symlink (as its called in Linux).
Dir of interest /run/user/3106/gvfs/smb-share:server=10.1.111.10,share=forskning03/zML-files/ We can use the following command to create a shortcut/symlink to this directory at the current location (from where the command is executed). The shortcut name will be files_to_move.
1 sudo ln -s &#39;/run/user/3106/gvfs/smb-share:server=10.1.111.10,share=forskning03/zML-files/&#39; files_to_move ]]></description>
</item>
</channel>
</rss>
